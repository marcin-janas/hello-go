Hello, Go!
My place to collect information about Go

Marcin Janas

* Hello, Go!
In this presentation, I have tried to collect the most important information about Go

* Main
.play src/main.go
.link https://golang.org/ref/spec#Program_execution
.link https://golang.org/ref/spec#Bootstrapping
.link https://golang.org/doc/effective_go.html#package-names
.link https://tour.golang.org/basics/1
.link https://golang.org/pkg/builtin/#println

* Keywords
Go only has **25* keywords!

    break, case, chan, const, continue,
    default, defer, else, fallthrough, for,
    func, go, goto, if, import,
    interface, map, package, range, return,
    select, struct, switch, type, var

"Syntax is clean and light on keywords"

.link https://golang.org/ref/spec#Keywords
.link https://github.com/golang/go/blob/master/src/go/token/token.go#L97
.link https://golang.org/doc/faq#principles

* Built-in functions
There is no guarantee that the **print* and **println* functions will stay in the language!

    append, cap, close, complex, copy,
    delete, imag, len, make, new,
    panic, print, println, real, recover

.link https://golang.org/ref/spec#Built-in_functions
.link https://golang.org/pkg/builtin/

* Basic types
- string
- bool
- uint, uint8, uint16, uint32, uint64, uintptr, int, int8, int16, int32, int64, byte (alias for uint8), rune (alias for int32), float32, float64 complex64, complex128
- pointer, function, interface, slice, channel, map
- array, struct
.link https://golang.org/ref/spec#Types
.link https://tour.golang.org/basics/11

* Zero values
- "" for strings
- false for booleans
- 0 for numeric types
- nil for pointers, functions, interfaces, slices, channels, and maps
- "each element of an array of structs will have its fields zeroed if no value is specified"
.link https://golang.org/ref/spec#The_zero_value
.link https://tour.golang.org/basics/12

* Constants
.play src/constants.go
.link https://golang.org/ref/spec#Constants
.link https://golang.org/ref/spec#Iota
.link https://golang.org/doc/effective_go.html#constants

* Variables
.play src/variables.go
.link https://golang.org/ref/spec#Variables
.link https://golang.org/doc/effective_go.html#variables

* Import
.play src/import.go
.link https://golang.org/doc/effective_go.html#package-names
.link https://tour.golang.org/basics/2
.link https://golang.org/pkg/fmt/#Println
.link https://golang.org/pkg/log/#Println

* Init
.play src/init.go
.link https://golang.org/doc/effective_go.html#init
.link https://golang.org/ref/spec#Package_initialization

* Blank identifier
.play src/blank.go
.link https://golang.org/ref/spec#Blank_identifier
.link https://golang.org/doc/effective_go.html#blank

* Unused
.play src/unused.go
.link https://golang.org/doc/effective_go.html#blank_unused
.link https://golang.org/doc/faq#unused_variables_and_imports

* If
"A language needs only one conditional control flow construct"

.play src/if.go
.link https://golang.org/ref/spec#If_statements
.link https://golang.org/doc/effective_go.html#if
.link https://golang.org/doc/faq#Does_Go_have_a_ternary_form

* For
"Go has only one looping construct, the for loop"

.play -edit src/for.go /START OMIT/,/END OMIT/
.link https://golang.org/ref/spec#For_statements
.link https://golang.org/doc/effective_go.html#for
.link https://tour.golang.org/flowcontrol/1

* Function
.play src/func.go
.link https://golang.org/ref/spec#Function_types
.link https://golang.org/doc/effective_go.html#functions
.link https://golang.org/doc/faq#Functions_methods

* Defer
.play src/defer.go
.link https://golang.org/ref/spec#Defer_statements
.link https://golang.org/doc/effective_go.html#defer
.link https://blog.golang.org/defer-panic-and-recover

* Error handling
.play src/error.go
.link https://golang.org/ref/spec#Errors
.link https://golang.org/doc/effective_go.html#errors
.link https://golang.org/doc/faq#exceptions
.link https://blog.golang.org/error-handling-and-go

* Log
.play src/log.go
.link https://golang.org/pkg/log/
.link https://dave.cheney.net/2015/11/05/lets-talk-about-logging
.link https://dave.cheney.net/2017/01/23/the-package-level-logger-anti-pattern

* Flag
.play src/flag.go
.link https://golang.org/pkg/flag/

* Testing
.link https://golang.org/doc/faq#How_do_I_write_a_unit_test
.link https://golang.org/doc/faq#testing_framework
.link https://golang.org/doc/code.html#Testing

.link https://github.com/golang/go/wiki/TableDrivenTests

.link https://dave.cheney.net/2019/05/07/prefer-table-driven-tests
.link https://dave.cheney.net/2016/05/10/test-fixtures-in-go

Files whose names begin with "_" (including "_test.go") or "." are ignored.
.link https://golang.org/cmd/go/#hdr-Test_packages

* Coverage
.link https://blog.golang.org/cover

* Exec
.play src/exec.go
.link https://golang.org/pkg/os/exec/

* JSON
.code src/json.json
.code -edit src/json.go /START OMIT/,/END OMIT/

.link https://golang.org/pkg/encoding/json/

* HTTP
.code -edit src/http1.go /START OMIT/,/END OMIT/
.code -edit src/http2.go /START OMIT/,/END OMIT/

.link https://golang.org/pkg/net/http/
.link https://golang.org/doc/effective_go.html#web_server

* Packages
.link https://golang.org/pkg/
.link https://github.com/pkg

.link https://dave.cheney.net/2019/01/08/avoid-package-names-like-base-util-or-common

* Dependencies
.link https://research.swtch.com/deps
