Hello, Go!
My place to collect information about Go

Marcin Janas

* Hello, Go!
In this presentation, I have tried to collect the most important information about Go

* Main
.play src/main.go
.link https://golang.org/ref/spec#Program_execution
.link https://golang.org/ref/spec#Bootstrapping
.link https://golang.org/doc/effective_go.html#package-names
.link https://tour.golang.org/basics/1
.link https://golang.org/pkg/builtin/#println

* Basic types
- string
- bool
- uint, uint8, uint16, uint32, uint64, uintptr, int, int8, int16, int32, int64, byte (alias for uint8), rune (alias for int32), float32, float64 complex64, complex128
- pointer, function, interface, slice, channel, map
- array, struct
.link https://golang.org/ref/spec#Types
.link https://tour.golang.org/basics/11

* Zero values
- "" for strings
- false for booleans
- 0 for numeric types
- nil for pointers, functions, interfaces, slices, channels, and maps
- "each element of an array of structs will have its fields zeroed if no value is specified"
.link https://golang.org/ref/spec#The_zero_value
.link https://tour.golang.org/basics/12

* Constants
.play src/constants.go
.link https://golang.org/ref/spec#Constants
.link https://golang.org/ref/spec#Iota
.link https://golang.org/doc/effective_go.html#constants

* Variables
.play src/variables.go
.link https://golang.org/ref/spec#Variables
.link https://golang.org/doc/effective_go.html#variables

* Import
.play src/import.go
.link https://golang.org/doc/effective_go.html#package-names
.link https://tour.golang.org/basics/2
.link https://golang.org/pkg/fmt/#Println
.link https://golang.org/pkg/log/#Println

* Init
.play src/init.go
.link https://golang.org/doc/effective_go.html#init
.link https://golang.org/ref/spec#Package_initialization

* Blank identifier
.play src/blank.go
.link https://golang.org/ref/spec#Blank_identifier
.link https://golang.org/doc/effective_go.html#blank

* Unused
.play src/unused.go
.link https://golang.org/doc/effective_go.html#blank_unused
.link https://golang.org/doc/faq#unused_variables_and_imports

* If
"A language needs only one conditional control flow construct"

.play src/if.go
.link https://golang.org/ref/spec#If_statements
.link https://golang.org/doc/effective_go.html#if
.link https://golang.org/doc/faq#Does_Go_have_a_ternary_form

* For
"Go has only one looping construct, the for loop"

.play -edit src/for.go /START OMIT/,/END OMIT/
.link https://golang.org/ref/spec#For_statements
.link https://golang.org/doc/effective_go.html#for
.link https://tour.golang.org/flowcontrol/1

* Function
.play src/func.go
.link https://golang.org/ref/spec#Function_types
.link https://golang.org/doc/effective_go.html#functions
.link https://golang.org/doc/faq#Functions_methods
